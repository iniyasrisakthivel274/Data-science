
from google.colab import files
uploaded = files.upload()

import pandas as pd
# Read the dataset
df = pd.read_csv('/content/House price.csv.csv', sep=';')

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv('/content/House price.csv.csv')

# 1. Basic Info
print("Dataset Info:")
print(df.info())
print("\nSummary Statistics:")
print(df.describe())

# 2. Missing Values
print("\nMissing Values:")
print(df.isnull().sum().sort_values(ascending=False).head(10))

# 3. Duplicate Records
duplicates = df[df.duplicated()]
print(f"\nDuplicate Rows: {len(duplicates)}")

# 4. Target Variable Distribution
plt.figure(figsize=(8, 5))
sns.histplot(df['price'], kde=True)
plt.title('price Distribution')
plt.xlabel('price')
plt.show()

# 5. Correlation Matrix (numeric only)
plt.figure(figsize=(10, 8))
corr = df.corr(numeric_only=True)
sns.heatmap(corr[['price']].sort_values(by='price', ascending=False), annot=True, cmap='coolwarm')
plt.title('Top Correlated Features with price')
plt.show()

# 6. Boxplots for Categorical Features vs Target
cat_features = ['OverallQual', 'Neighborhood', 'HouseStyle']
for col in cat_features:
    if col in df.columns:
        plt.figure(figsize=(10, 5))
        sns.boxplot(x=col, y='price', data=df)
        plt.title(f'price by {col}')
        plt.xticks(rotation=45)
        plt.show()

# 7. Scatterplots for Numerical Features vs Target
num_features = ['GrLivArea', 'TotalBsmtSF', 'GarageArea']
for col in num_features:
    if col in df.columns:
        plt.figure(figsize=(8, 5))
        sns.scatterplot(x=col, y='price', data=df, alpha=0.5)
        plt.title(f'{col} vs price')
        plt.show()

import pandas as pd

# Load your dataset (replace 'house_data.csv' with your actual file path)
df = pd.read_csv('/content/House price.csv.csv')

# Check for missing values
print("Missing values per column:")
print(df.isnull().sum())

# Display rows with missing values (optional)
print("\nRows with missing values:")
print(df[df.isnull().any(axis=1)])

# Check for duplicate rows
duplicate_rows = df[df.duplicated()]
print(f"\nNumber of duplicate rows: {duplicate_rows.shape[0]}")

# Display duplicate rows (optional)
if not duplicate_rows.empty:
    print("\nDuplicate rows:")
    print(duplicate_rows)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your dataset
df = pd.read_csv('/content/House price.csv.csv')

# Set plot style
sns.set(style="whitegrid")

# Plot 1: Distribution of SalePrice
plt.figure(figsize=(8, 5))
sns.histplot(df['price'], kde=True, color='blue')
plt.title('Distribution of price')
plt.xlabel('price')
plt.ylabel('Frequency')
plt.show()

# Plot 2: SalePrice vs GrLivArea (above ground living area)
plt.figure(figsize=(8, 5))
sns.scatterplot(x='size', y='price', data=df, alpha=0.5)
plt.title('price vs size')
plt.xlabel('size')
plt.ylabel('price')
plt.show()

# Plot 3: Boxplot of SalePrice by OverallQual (overall material and finish quality)
plt.figure(figsize=(8, 5))
sns.boxplot(x='size', y='price', data=df)
plt.title('price by Overall Quality')
plt.xlabel('size')
plt.ylabel('price')
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('/content/House price.csv.csv')

# Identify the target variable
target = 'price'
y = df[target]

# Option 1: Select numerical features with high correlation to target
correlation = df.corr(numeric_only=True)[target].sort_values(ascending=False)
print("Top correlated features with SalePrice:\n", correlation.head(10))

# Choose top correlated features (excluding the target itself)
top_features = correlation.index[1:6] # Adjust the range as needed
X = df[top_features]

# Print selected features
print("\nSelected features for regression:")
print(top_features.tolist())

# Optional: Visualize feature correlation with target
plt.figure(figsize=(8, 5))
sns.heatmap(df[top_features.tolist() + [target]].corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap of Selected Features')
plt.show()

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load dataset
df = pd.read_csv('/content/House price.csv.csv')

# 1. Identify categorical columns
cat_cols = df.select_dtypes(include=['object']).columns
print("Categorical Columns:")
print(cat_cols.tolist())

# 2. Option A: Label Encoding (for ordinal or binary categories)
label_enc_cols = ['Street', 'CentralAir'] # example ordinal/binary columns
le = LabelEncoder()
for col in label_enc_cols:
    if col in df.columns:
        df[col] = le.fit_transform(df[col])

# 3. Option B: One-Hot Encoding (for nominal categories)
one_hot_cols = [col for col in cat_cols if col not in label_enc_cols]
df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)

# 4. Check the transformed dataset
print("\nDataset shape after encoding:", df.shape)
print(df.head())

import pandas as pd

# Load dataset
df = pd.read_csv('/content/House price.csv.csv')

# Identify categorical columns
categorical_cols = df.select_dtypes(include=['object']).columns
print("Categorical columns:", categorical_cols.tolist())

# Apply One-Hot Encoding
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# Check result
print("Dataset shape after One-Hot Encoding:", df_encoded.shape)
print(df_encoded.head())

import pandas as pd
import joblib
import gradio as gr

# Load trained model (pipeline with preprocessing + XGBoost or similar regressor)
model = joblib.load('/content/smart_house_price_model.pkl')

# Define prediction function
def predict_house_price(OverallQual, GrLivArea, GarageCars, GarageArea, TotalBsmtSF, FullBath, YearBuilt):
    # Create input dataframe
    input_data = {
        'OverallQual': OverallQual,
        'GrLivArea': GrLivArea,
        'GarageCars': GarageCars,
        'GarageArea': GarageArea,
        'TotalBsmtSF': TotalBsmtSF,
        'FullBath': FullBath,
        'YearBuilt': YearBuilt
    }
    input_df = pd.DataFrame([input_data])
    prediction = model.predict(input_df)[0]
    return f"Predicted House Price: ${prediction:,.2f}"

# Create Gradio interface
inputs = [
    gr.Slider(1, 10, step=1, label="Overall Quality"),
    gr.Slider(500, 5000, step=50, label="Above Ground Living Area (sq ft)"),
    gr.Slider(0, 4, step=1, label="Garage Cars"),
    gr.Slider(0, 1500, step=50, label="Garage Area (sq ft)"),
    gr.Slider(0, 3000, step=50, label="Total Basement SF"),
    gr.Slider(0, 4, step=1, label="Full Bathrooms"),
    gr.Slider(1900, 2023, step=1, label="Year Built"),
]

gr.Interface(
    fn=predict_house_price,
    inputs=inputs,
    outputs="text",
    title="House Price Predictor",3
    description="Enter the details of the house to predict its price."
).launch()

